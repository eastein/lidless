#!/usr/bin/env python

import sys
import time
import threading
import signal
import json

import zmstream

import percept
import historical
import lidlessweb
import lidlessirc
import lidlessannounced

class ThreadManager(object) :
	def __init__(self) :
		self.thrs = []

	def add(self, thr) :
		self.thrs.append(thr)

	def start(self) :
		for t in self.thrs :
			t.start()

	def stop(self) :
		print 'stopping'
		for t in self.thrs :
			t.stop()
		print 'joining'
		for t in self.thrs :
			t.join()
			print 'joined thread %s' % str(t)
		self.thrs = []

	@property
	def done(self) :
		return self.thrs == []

def usage() :
	# TODO take a 'what you did wrong' string and display it with the usage
	print 'usage: lidless <configfile> [role]\n\n\tconfigfile should be json\n\trole is default, allows selecting certain roles for processing in different processes.'
	sys.exit(1)

def all_in(stanza, keys) :
	for k in keys :
		if k not in stanza :
			print 'stanza of type %s needs setting %s, does not have it.\n' % (stanza['type'], k)
			usage()

def roled(role, stanza, thr, deactivate=False) :
	stanza_role = stanza['role']
	if isinstance(stanza_role, str) :
		stanza_role = [stanza_role]
	
	if role not in stanza_role:
		if deactivate :
			thr.deactivate()
		else :
			thr.stop()
		return True
	return False

if __name__ == '__main__' :
	fh = None
	try :
		fh = open(sys.argv[1])
		conf = json.load(fh)
	except :
		usage()
	finally :
		if fh :
			fh.close()

	try :
		role = sys.argv[2]
	except :
		role = 'default'

	t = ThreadManager()
	percepts = {}
	alerts = []

	if not isinstance(conf, list) :
		usage()

	disqualified = True
	used_epr = False
	er = lidlessweb.EndpointRouter()

	# TODO regexes for all the setting types, people are crazy
	for stanza in conf :
		if not isinstance(stanza, dict) :
			usage()
		if 'type' not in stanza :
			usage()

		if 'role' not in stanza :
			stanza['role'] = 'default'

		if stanza['type'] == 'camera' :
			all_in(stanza, ['url', 'name'])
		else :
			continue

		auth = None
		zm_ahs = None
		zmq_url = None
		if 'username' in stanza or 'password' in stanza :
			all_in(stanza, ['username', 'password'])
			auth = stanza['username'], stanza['password']
			if 'zm_auth_hash_secret' in stanza :
				zm_ahs = stanza['zm_auth_hash_secret']
			if 'zmq_url' in stanza :
				zmq_url = stanza['zmq_url']
				import zmq # just to error fast, rather than slow; before any threads start.
		mode = zmstream.Mode.MJPEG
		if 'mode' in stanza :
			mk = stanza['mode'].upper()
			if not hasattr(zmstream.Mode, mk) :
				usage()
			mode = getattr(zmstream.Mode, mk)

		description = None
		if 'description' in stanza :
			description = stanza['description']
		snapshot = False
		if 'snapshot' in stanza :
			snapshot = stanza['snapshot']
		snapshot_base_url = 'http://localhost:8000'
		if 'snapshot_base_url' in stanza :
			snapshot_base_url = stanza['snapshot_base_url']
		
		perc = percept.Percept(
			stanza['name'],
			description,
			stanza['url'],
			auth=auth, 
			zm_auth_hash_secret=zm_ahs,
			zmq_url=zmq_url,
			mode=mode,
			snapshot=snapshot,
			snapshot_base_url=snapshot_base_url,
			role=stanza['role'],
			store=stanza.get('store', False),
			store_thr=stanza.get('store_thr', 1)
		)
		t.add(perc)

		perc.history = historical.History(perc.camname, perc)
		t.add(perc.history)

		disqualified &= roled(role, stanza, perc, deactivate=True)
		disqualified &= roled(role, stanza, perc.history)

		percepts[perc.camname] = perc
		er.reg_camera(stanza['name'], stanza['role'])

	for stanza in conf :
		if stanza['type'] == 'alert' :
			all_in(stanza, ['mode', 'message', 'camera', 'throttle'])
			if stanza['camera'] not in percepts :
				usage()

			perc = percepts[stanza['camera']]
			
			mode = stanza['mode']
			if mode not in  ['instant', 'sustain'] :
				usage()

			args = {}
			if mode == 'sustain' :
				if 'duration' not in stanza :
					usage()
				else :
					args['duration'] = stanza['duration']

			if 'level' in stanza and 'low_level' in stanza :
				print 'you cannot use both level and low_level in a stanza; they are 2 names for one setting.'
				usage()

			low_level = None
			high_level = None
			if 'level' in stanza :
				low_level = stanza['level']
			elif 'low_level' in stanza :
				low_level = stanza['low_level']
			if 'high_level' in stanza :
				high_level = stanza['high_level']
			alert = percept.Alert(perc, stanza['mode'], low_level, high_level, stanza['message'], stanza['throttle'], **args)

			dq = roled(role, stanza, alert)

			disqualified &= dq

			if not dq and not perc.live_ratio :
				usage()

			alerts.append(alert)

	spaceapis = dict()

	for stanza in conf :
		if stanza['type'] == 'spaceapi' :
			all_in(stanza, ['name', 'metadata', 'cameras', 'needed_activity'])
			stanza.setdefault("status_note", None)
			# these don't really have a role.
			# TODO FIXME do type and existence checks on the values set here.

			cameras = list()

			for cam in stanza['cameras'] :
				cameras.append((percepts[cam], stanza['cameras'][cam]))

			spaceapi = lidlessweb.SpaceAPI(stanza['metadata'], cameras, stanza['needed_activity'], stanza['status_note'])
			spaceapis[stanza['name']] = spaceapi
	
	for stanza in conf :
		if stanza['type'] == 'irc' :
			all_in(stanza, ['server', 'nick', 'channel'])
			irct = lidlessirc.LidlessBotThread(stanza['server'], stanza['nick'], stanza['channel'], percepts, alerts, er)
			t.add(irct)
			disqualified &= roled(role, stanza, irct)
		elif stanza['type'] == 'web' :
			all_in(stanza, ['port'])

			# default proxy settings
			stanza.setdefault('proxy_endpoint', None)
			stanza.setdefault('proxy_mode', None)
			stanza.setdefault('zmq_url', None)

			ep = stanza['proxy_endpoint']

			if stanza['proxy_mode'] == 'auto' :
				ep = er
				used_epr = True
			elif stanza['proxy_endpoint'] is None and stanza['proxy_mode'] is None:
				er.reg_web(stanza['role'], stanza['port'], stanza['zmq_url'])

			lweb = lidlessweb.LidlessWeb(percepts, spaceapis, port=stanza['port'], endpoint=ep, role=stanza['role'], zmq_url=stanza['zmq_url'])
			t.add(lweb)
			disqualified &= roled(role, stanza, lweb)
		elif stanza['type'] == 'announced' :
			all_in(stanza, ['zmq_url'])
			
			announcer = lidlessannounced.LidlessAnnouncer(alerts, stanza['zmq_url'])
			t.add(announcer)
			disqualified &= roled(role, stanza, announcer)

	if used_epr and not er.valid :
		print "Error: proxy_mode: auto was used but not all cameras have a local non-proxy web host"
		sys.exit(1)

	if disqualified :
		# this means that none of the stanzas applied here: give up, this can accomplish nothing.
		print 'Error: role %s has no active stanzas, aborting.' % role
		sys.exit(1)

	t.start()
	signal.signal(signal.SIGTERM, lambda a,b: t.stop())
	signal.signal(signal.SIGINT, lambda a,b: t.stop())

	while not t.done :
		try :
			while not t.done :
				time.sleep(.1)
		except KeyboardInterrupt :
			t.stop()
